
- acrescentar as palavras reservadas à secção "sobre variáveis"?

(parece-me que não. isto são detalhes)

  * Há agumas palavras que são consideradas palavras reservadas
    Python. Porque estão associadas a instruções específicas. Por
    exemplo a palavra `and`, em português `e`, representa o operador
    lógico de comjunção. O `e` lógico. Os nomes da variáveis não pode
    ser palavras reservadas Python.





- acrescentar variáveis como endereçoes de memória à secção "sobre variáveis"?

(parece-me que não. isto são detalhes)

**Endereços de memória**

As posições da memória disponíveis nos computadores estão
numeradas. Podemos aceder à posição `1`, à posição `2`, etc. Os
números que identificam as posições de memória chamam-se
endereços. São referências para posições de memória.

Num computador com memória de `8G`, há `8 000 000 000` posições de
memória. Imagine-se o que seria um programa que usasse posições de
memória diretamente.

**Hipótese de programa**

```
294 593 395 = 5.2
963 334 108 = 7.3
439 155 089 = 294 593 395 + 963 334 108
print(439 155 089)
```

Seria praticamente impossível programar assim. Essencialmente porque:

* teriamos que conhecer as posições de memória que estivessem livres
  para armazenar valores.

* um programa poderia funcionar num computador e não funcionar noutro
  que tivesse, por exemplo, menos memória.

* facilmente nos enganariamos ao ter que manipular tantos números tão
  grandes.

* os programas seriam particamente impossíeis de ler e, como tal, de
  perceber.

Em Python, as posições de memória onde os valores são armazenados, são
escolhidas automatcamente pelo intrepretador Python (em conjunto com o
sistema operativo do computador).

Em Python, as variáveis são nomes atribuídos às referências para as
posições de memória onde estão os valores com os quais foram
inicializadas. Por outras palavras, são referências para posições de
memória com nomes escolhidos pelos programadores. Esta característica
é diferente de outras linguagens de programação e tem consequências
que veremos mais às frente.





- acresentar vantagens de funções à secção "Sobre funções" (Hello
  print and strings)?

NÃO. É muito cedo

Mas as vantagens de utilização de funções vão muito para além da
poupança do tempo de desenvolvimeto.

**Detalhes de implementação escondidos - *Interface* **

Na verdade a cópia de valores para a memória de vídeo do computador é
uma operação complexa. É necessário, por exemplo, conhecer em detalhe
a organização da memória de vídeo do computador. Para conseguir que o
*output* seja feito no local pretendido do monitor.

Mas a função `print` esconde estes detalhes. O programador pode usar a
funçãp `print` sem se preocupar com os detalhes de implementação. Pode
nem sequer os conhcer. Outros programadores ocuparam-se desses
detalhes e forneceram a função `print` pronta a usar. Deste ponto de
vista uma função define um *interface* para um sistema complexo. São
definidos os valores que devem ser fornecidos à função, e qual o
resultado obtido. Tudo o resto são detalhes de implementação que só
dizem respeito a quem definiu a função. Este ponto de vista traduz-se
numa grande vantagem porque leva ao desenvolvimento de programas de
uma forma modular. E quanto mais modulares forrm os programas maiores
são as possibilidades dos seus módulos serem reutilizados.

**Código concentrado num só ponto**

Suponhamos, por um instante, que não existia a função `print` e que o
programa que estamos a desenvolver requer o *output* de um texto com
dez frases. Por, exmplo, `Hello World` em dez línguas
diferentes. Teriamos de escrever as instruções que copiam uma *string*
para a memória de vídeo, dez vezes. À partida não parece haver um
grande problema porque fariamos isto rapidamente usando
*copy/paste*. Mas ficariamos com dez cópias dessas instruções
espalhadas pelo nosso programa.

Suponhamos agora que descobriamos entretanto uma forma mais eficiente
de fazer a cópia em causa. Quererimaos naturalmente alterar as
instruções de cópia para passar a usar a forma mais eficiente. Mas
teríamos que efetuar essa alterações dez vezes. E se fossem cem vezes?
Certamente que nos iriamos enganar nalgum dos *copy/paste*. E se
fossem mil vezes? Nem conseguimos imaginar, corrigir um *copy/paste*
mil vezes. :-)

A solução para este problema é muito simples. O que deveriamos ter
feito era definir uma função para fazer `print`. E por isso é que a
função `print` existe.

**Estrutura do programa**

Tal como já foi dito as funções permitem o desenvolvimento de programs
de forma modular. Por essa razão é habitual definirem-se funções mesmo
para partes dos programas que são usadas poucas vezes, ou até mesmo
uma única vez. Do ponto de vista da estrutura e da legibilidade do
programa associada a essa estrutura, é habitual optar-se por criar
funções mesmo para partes do programa que só são usadas uma vez.

**Spagetti code**

???


